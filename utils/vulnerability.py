import pandas as pd
import pickle
from lifelines import CoxPHFitter
from datetime import datetime
import os

# Ensure the models directory exists
os.makedirs("models", exist_ok=True)

def preprocess_data(df):
    df.rename(columns={
        "Release Date": "release_date",
        "First CVE Date": "vuln_date"
    }, inplace=True)

    df["release_date"] = pd.to_datetime(df["release_date"])
    df["vuln_date"] = pd.to_datetime(df["vuln_date"])
    df["duration"] = (df["vuln_date"] - df["release_date"]).dt.days
    df["event"] = 1  # all are observed vulnerabilities

    # Extract calendar-based features
    df["release_year"] = df["release_date"].dt.year
    df["release_month"] = df["release_date"].dt.month
    df["release_day"] = df["release_date"].dt.day

    # Add season as a categorical feature
    df["season"] = df["release_month"].apply(lambda m: (
        "Spring" if m in [3, 4, 5]
        else "Summer" if m in [6, 7, 8]
        else "Fall" if m in [9, 10, 11]
        else "Winter"
    ))

    # One-hot encode season
    df_encoded = pd.get_dummies(
        df[["duration", "event", "release_year", "release_month", "release_day", "season"]],
        drop_first=True
    )
    return df_encoded

def train_survival_model():
    # Load vuln dataset
    df = pd.read_excel("../FortinetVulnerabilities.xlsx")
    processed = preprocess_data(df)

    cph = CoxPHFitter()
    cph.fit(processed, duration_col="duration", event_col="event")

    with open("models/survival_model.pkl", "wb") as f:
        pickle.dump(cph, f)

    print("Survival model trained and saved.")

def predict_vulnerability_days(release_date_str):
    """
    Predict the number of days until vulnerability using the trained survival model.
    """
    release_date = pd.to_datetime(release_date_str)

    input_data = {
        "release_year": release_date.year,
        "release_month": release_date.month,
        "release_day": release_date.day,
        "season_Spring": 0,
        "season_Summer": 0,
        "season_Winter": 0
    }

    month = release_date.month
    if month in [3, 4, 5]:
        input_data["season_Spring"] = 1
    elif month in [6, 7, 8]:
        input_data["season_Summer"] = 1
    else:
        input_data["season_Winter"] = 1

    df_input = pd.DataFrame([input_data])

    with open("models/survival_model.pkl", "rb") as f:
        model = pickle.load(f)

    pred = model.predict_expectation(df_input)
    return int(pred.iloc[0])

from lifelines.utils import concordance_index

def evaluate_model():
    df = pd.read_excel("../FortinetVulnerabilities.xlsx")
    processed = preprocess_data(df)

    # Split into training and testing sets
    train_df = processed.sample(frac=0.8, random_state=42)
    test_df = processed.drop(train_df.index)

    # Train model
    cph = CoxPHFitter()
    cph.fit(train_df, duration_col="duration", event_col="event")

    # Evaluate on test data
    cindex = concordance_index(
        event_times=test_df["duration"],
        predicted_scores=-cph.predict_partial_hazard(test_df),
        event_observed=test_df["event"]
    )

    print(f"üîç Concordance Index (C-index): {cindex:.3f}")

# Optional: run model training manually
if __name__ == "__main__":
    train_survival_model()
    evaluate_model()
